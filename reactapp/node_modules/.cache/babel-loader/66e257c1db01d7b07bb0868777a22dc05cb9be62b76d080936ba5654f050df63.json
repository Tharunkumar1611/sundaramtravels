{"ast":null,"code":"var _jsxFileName = \"D:\\\\8b67412f-8cf6-4d87-9832-a9ac015d5e57-ff5e7c35-52b6-4e83-b04c-b68610e3a721\\\\reactapp\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\n\n// Create Auth Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Custom hook to use Auth Context\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Auth Provider Component\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [role, setRole] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Initialize auth state from localStorage\n  useEffect(() => {\n    const initializeAuth = () => {\n      try {\n        const storedToken = localStorage.getItem('token');\n        const storedRole = localStorage.getItem('role');\n        const storedUsername = localStorage.getItem('username');\n        if (storedToken) {\n          // Verify token is still valid\n          try {\n            const decoded = jwtDecode(storedToken);\n            const currentTime = Date.now() / 1000;\n            if (decoded.exp && decoded.exp < currentTime) {\n              // Token expired\n              console.log('Token expired, clearing auth state');\n              clearAuth();\n            } else {\n              // Token is valid\n              setToken(storedToken);\n              setRole(storedRole || 'user');\n              setUser({\n                username: storedUsername || decoded.sub || decoded.username,\n                email: decoded.email || storedUsername\n              });\n              setIsAuthenticated(true);\n            }\n          } catch (decodeError) {\n            console.error('Error decoding token:', decodeError);\n            // Token is invalid, but we'll keep it for now\n            // Backend will reject if truly invalid\n            setToken(storedToken);\n            setRole(storedRole || 'user');\n            setUser({\n              username: storedUsername\n            });\n            setIsAuthenticated(true);\n          }\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        clearAuth();\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // Clear authentication state\n  const clearAuth = useCallback(() => {\n    setUser(null);\n    setToken(null);\n    setRole(null);\n    setIsAuthenticated(false);\n    localStorage.removeItem('token');\n    localStorage.removeItem('username');\n    localStorage.removeItem('role');\n  }, []);\n\n  // Login function\n  const login = useCallback((authToken, userRole, username) => {\n    try {\n      // Decode token to get user info\n      const decoded = jwtDecode(authToken);\n\n      // Store in localStorage\n      localStorage.setItem('token', authToken);\n      localStorage.setItem('role', userRole);\n      localStorage.setItem('username', username || decoded.sub || decoded.username);\n\n      // Update state\n      setToken(authToken);\n      setRole(userRole);\n      setUser({\n        username: username || decoded.sub || decoded.username,\n        email: decoded.email || username\n      });\n      setIsAuthenticated(true);\n      return true;\n    } catch (error) {\n      console.error('Error during login:', error);\n      return false;\n    }\n  }, []);\n\n  // Logout function\n  const logout = useCallback(() => {\n    clearAuth();\n  }, [clearAuth]);\n\n  // Update user information\n  const updateUser = useCallback(updatedUserData => {\n    setUser(prevUser => ({\n      ...prevUser,\n      ...updatedUserData\n    }));\n\n    // Update username in localStorage if changed\n    if (updatedUserData.username) {\n      localStorage.setItem('username', updatedUserData.username);\n    }\n  }, []);\n\n  // Check if user has specific role\n  const hasRole = useCallback(requiredRole => {\n    return role === requiredRole;\n  }, [role]);\n\n  // Check if user is admin\n  const isAdmin = useCallback(() => {\n    return role === 'admin';\n  }, [role]);\n\n  // Check if user is regular user\n  const isUser = useCallback(() => {\n    return role === 'user';\n  }, [role]);\n\n  // Refresh token (placeholder - implement if backend supports refresh)\n  const refreshToken = useCallback(async () => {\n    // TODO: Implement token refresh logic if backend supports it\n    console.log('Token refresh not implemented');\n    return false;\n  }, []);\n\n  // Context value\n  const value = {\n    // State\n    user,\n    token,\n    role,\n    loading,\n    isAuthenticated,\n    // Functions\n    login,\n    logout,\n    updateUser,\n    clearAuth,\n    hasRole,\n    isAdmin,\n    isUser,\n    refreshToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"44A3MXJSaOiwvhU8t9Z3GDuMbkg=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","useNavigate","jwtDecode","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","role","setRole","loading","setLoading","isAuthenticated","setIsAuthenticated","initializeAuth","storedToken","localStorage","getItem","storedRole","storedUsername","decoded","currentTime","Date","now","exp","console","log","clearAuth","username","sub","email","decodeError","error","removeItem","login","authToken","userRole","setItem","logout","updateUser","updatedUserData","prevUser","hasRole","requiredRole","isAdmin","isUser","refreshToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/8b67412f-8cf6-4d87-9832-a9ac015d5e57-ff5e7c35-52b6-4e83-b04c-b68610e3a721/reactapp/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n// Create Auth Context\r\nconst AuthContext = createContext(null);\r\n\r\n// Custom hook to use Auth Context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Auth Provider Component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(null);\r\n  const [role, setRole] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Initialize auth state from localStorage\r\n  useEffect(() => {\r\n    const initializeAuth = () => {\r\n      try {\r\n        const storedToken = localStorage.getItem('token');\r\n        const storedRole = localStorage.getItem('role');\r\n        const storedUsername = localStorage.getItem('username');\r\n\r\n        if (storedToken) {\r\n          // Verify token is still valid\r\n          try {\r\n            const decoded = jwtDecode(storedToken);\r\n            const currentTime = Date.now() / 1000;\r\n            \r\n            if (decoded.exp && decoded.exp < currentTime) {\r\n              // Token expired\r\n              console.log('Token expired, clearing auth state');\r\n              clearAuth();\r\n            } else {\r\n              // Token is valid\r\n              setToken(storedToken);\r\n              setRole(storedRole || 'user');\r\n              setUser({\r\n                username: storedUsername || decoded.sub || decoded.username,\r\n                email: decoded.email || storedUsername,\r\n              });\r\n              setIsAuthenticated(true);\r\n            }\r\n          } catch (decodeError) {\r\n            console.error('Error decoding token:', decodeError);\r\n            // Token is invalid, but we'll keep it for now\r\n            // Backend will reject if truly invalid\r\n            setToken(storedToken);\r\n            setRole(storedRole || 'user');\r\n            setUser({ username: storedUsername });\r\n            setIsAuthenticated(true);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Error initializing auth:', error);\r\n        clearAuth();\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  // Clear authentication state\r\n  const clearAuth = useCallback(() => {\r\n    setUser(null);\r\n    setToken(null);\r\n    setRole(null);\r\n    setIsAuthenticated(false);\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('username');\r\n    localStorage.removeItem('role');\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = useCallback((authToken, userRole, username) => {\r\n    try {\r\n      // Decode token to get user info\r\n      const decoded = jwtDecode(authToken);\r\n      \r\n      // Store in localStorage\r\n      localStorage.setItem('token', authToken);\r\n      localStorage.setItem('role', userRole);\r\n      localStorage.setItem('username', username || decoded.sub || decoded.username);\r\n\r\n      // Update state\r\n      setToken(authToken);\r\n      setRole(userRole);\r\n      setUser({\r\n        username: username || decoded.sub || decoded.username,\r\n        email: decoded.email || username,\r\n      });\r\n      setIsAuthenticated(true);\r\n\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // Logout function\r\n  const logout = useCallback(() => {\r\n    clearAuth();\r\n  }, [clearAuth]);\r\n\r\n  // Update user information\r\n  const updateUser = useCallback((updatedUserData) => {\r\n    setUser(prevUser => ({\r\n      ...prevUser,\r\n      ...updatedUserData\r\n    }));\r\n    \r\n    // Update username in localStorage if changed\r\n    if (updatedUserData.username) {\r\n      localStorage.setItem('username', updatedUserData.username);\r\n    }\r\n  }, []);\r\n\r\n  // Check if user has specific role\r\n  const hasRole = useCallback((requiredRole) => {\r\n    return role === requiredRole;\r\n  }, [role]);\r\n\r\n  // Check if user is admin\r\n  const isAdmin = useCallback(() => {\r\n    return role === 'admin';\r\n  }, [role]);\r\n\r\n  // Check if user is regular user\r\n  const isUser = useCallback(() => {\r\n    return role === 'user';\r\n  }, [role]);\r\n\r\n  // Refresh token (placeholder - implement if backend supports refresh)\r\n  const refreshToken = useCallback(async () => {\r\n    // TODO: Implement token refresh logic if backend supports it\r\n    console.log('Token refresh not implemented');\r\n    return false;\r\n  }, []);\r\n\r\n  // Context value\r\n  const value = {\r\n    // State\r\n    user,\r\n    token,\r\n    role,\r\n    loading,\r\n    isAuthenticated,\r\n    \r\n    // Functions\r\n    login,\r\n    logout,\r\n    updateUser,\r\n    clearAuth,\r\n    hasRole,\r\n    isAdmin,\r\n    isUser,\r\n    refreshToken,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}